#!/bin/bash

# Must change all ram9 to jre4 and Elliott to Gromacs or Gromacs/MBAR

Compound=Ethane

#MolWt=30.0698

Model=TraPPEfs

iEpsref=0

iSigref=0

eps_low=0.85
eps_high=1.2

eps=(1.0143) #122 K

sigma=(0.377 0.38 0.375) #nm

direct=0 #1-simulate reference, 0-skip simulate reference

if [ $direct -lt 0 ]

then

#### Start the mdrun simulations for the initial epsilon and sigma values

for iSigma in $(seq $iSigref $iSigref) #Just run at sig_ref
do

for iEps in $(seq $iEpsref $iEpsref) #Just run at eps_ref
do

echo Run ITIC for Epsilon = "${eps[iEps]}" sigma = "${sigma[iSigma]}"
sleep 2s

####

cd /home/ram9/"$Compound"/Gromacs/"$Model" || exit 

#jretemp 
mkdir e"$iEps"s"$iSigma"
cd e"$iEps"s"$iSigma" || exit

#Create files with force field parameters

echo "${eps[iEps]}" "${sigma[iSigma]}" > eps_Sigma

cp /home/ram9/"$Compound"/Gromacs/Force_switch/ethane_temp.top ethane.top 
cp /home/ram9/"$Compound"/Gromacs/Force_switch/ethane.gro ethane.gro 
sed -i -e s/some_epsilon/"${eps[iEps]}"/ ethane.top
sed -i -e s/some_sigma/"${sigma[iSigma]}"/ ethane.top

cp /home/ram9/Elliott/EthaneRunITIC_all EthaneRunITIC_all

sed -i -e s/some_compound_top/"${Compound}"/ EthaneRunITIC_all
sed -i -e s/some_model_top/"${Model}"/ EthaneRunITIC_all
sed -i -e s/some_iSigma_top/"${iSigma}"/ EthaneRunITIC_all
sed -i -e s/some_iEps_top/"${iEps}"/ EthaneRunITIC_all

./EthaneRunITIC_all

done #for iEps

done #for iSigma

#Obtain the REFPROP values at the ITIC conditions

python ~/Elliott/generate_REFPROP_values.py

fi

# Rerun the initial epsilons



# Perform the rerun simulations 

#cd /home/ram9/"$Compound"/Gromacs/"$Model"/e"$iEpsref"s"$iSigref" || exit 

# Create files with epsilon parameters
#echo "$eps_low" > eps_low_current
#echo "$eps_high" > eps_high_current
#echo "${eps[0]}" > eps_it_0
#echo "${eps[1]}" > eps_it_1

#F1=0.5
#F2=0.37

#echo "Epsilon (kJ/mol) Sigma (nm)" > eps_Sigma_all

#for iSigma in $(seq $iSigref $iSigref)
#do

#for iEps in $(seq 0 1)
#do

#echo "$iEps" > iEps_iteration

#echo Reference Epsilon = "${eps[iEpsref]}" sigma = "${sigma[iSigref]}"
#echo MBAR rerun Epsilon = "${eps[iEps]}" sigma = "${sigma[iSigma]}"
#sleep 2s

####

# copy and set force field files

#cd /home/ram9/"$Compound"/Gromacs/"$Model"/e"$iEpsref"s"$iSigref" || exit #Must cd back 

#echo "${eps[iEps]}" "${sigma[iSigma]}" >> eps_Sigma_all
#echo "${eps[iEps]}" > eps_it_"$iEps"

#cp /home/ram9/"$Compound"/Gromacs/Force_switch/ethane_temp.top ethane_e"$iEps"s"$iSigma".top
#sed -i -e s/some_epsilon/"${eps[iEps]}"/ ethane_e"$iEps"s"$iSigma".top 
#sed -i -e s/some_sigma/"${sigma[iSigma]}"/ ethane_e"$iEps"s"$iSigma".top

#cp /home/ram9/Elliott/EthaneRerunITIC_all EthaneRerunITIC_all

#sed -i -e s/some_compound_top/"${Compound}"/ EthaneRerunITIC_all
#sed -i -e s/some_model_top/"${Model}"/ EthaneRerunITIC_all
#sed -i -e s/some_iSigma_top/"${iSigma}"/ EthaneRerunITIC_all
#sed -i -e s/some_iEps_top/"${iEps}"/ EthaneRerunITIC_all
#sed -i -e s/some_iRefSig_top/"${iSigref}"/ EthaneRerunITIC_all
#sed -i -e s/some_iRefEps_top/"${iEpsref}"/ EthaneRerunITIC_all

#./EthaneRerunITIC_all

#python objective_from_MBAR.py

#done #for iEps

#done #for iSigma

#python MBAR_analysis_all_alt_2.py
#sleep 3m

cd /home/ram9/"$Compound"/Gromacs/"$Model"/e"$iEpsref"s"$iSigref" || exit

echo "Eps (kJ/mol)" > eps_all
echo "Objective" > F_all

echo "$eps_low" > X0_current
echo "$eps_high" > X3_current
echo "${eps[0]}" > X1_current

python ~/Elliott/first_step_eps.py

# I do not need to have the function evaluation for the lower and upper bounds
#X0=$eps_low
#X3=$eps_high
#X1="${eps[0]}"
#X2="${eps[1]}"

#R_ratio=0.61803399
#C_ratio=`echo "1.-$R_ratio" |bc`
#diff_high=`echo "$X3-$X1" |bc`
#diff_low=`echo "$X1-$X0" |bc`

#echo "$diff_low"
#echo "$diff_high"

#if [ "$diff_high" -gt "$diff_low" ]

#then

#X1=$X1
#X2=`echo "$X1 + $C_ratio*($X3-$X1)" |bc`
#eps_it_0=$X1
#eps_it_1=$X2

#else

#X2=$X1
#X1=`echo "$X2 - $C_ratio*($X2-$X0)" |bc`
#eps_it_1=$X1
#eps_it_0=$X2

#fi

#echo $X1
#echo $X2

sleep 5s

cd /home/ram9/"$Compound"/Gromacs/"$Model"/e"$iEpsref"s"$iSigref" || exit 

#echo "$X0" > X0_current
#echo "$X1" > X1_current
#echo "$X2" > X2_current
#echo "$X3" > X3_current


# Iterate to optimize epsilon only

for iteration in $(seq 0 10) #Start at 2 since we already did 0-1
do

cd /home/ram9/"$Compound"/Gromacs/"$Model"/e"$iEpsref"s"$iSigref" || exit 

echo "$iteration" > iEps_iteration

python ~/Elliott/single_iteration_step_eps.py

#if [ $iteration -gt 1 ]

#then

#if [ $F2 -lt $F1 ]

#then

#X0=$X1
#X1=$X2
#X2=`echo "$R_ratio*$X1 + $C_ratio*$X3" | bc`
#F1=$F2
#eps_it=$X2

#else

#X3=$X2
#X2=$X1
#X1=`echo "$R_ratio*$X2 + $C_ratio*$X0" | bc`
#F2=$F1
#eps_it=$X1

#fi

#elif [ $iteration -eq 0 ]

#then

#eps_it=$X1

#elif [ $iteration -eq 1 ]

#then

#eps_it=$X2

#fi

#echo $eps_it > eps_it_"$iteration"

eps_it=$(<eps_it_"$iteration")
echo "$eps_it" >> eps_all
sig_it="${sigma[iSigref]}" #Sigma is held constant

# Perform the rerun simulations 


echo Reference Epsilon = "${eps[iEpsref]}" sigma = "${sigma[iSigref]}"
echo MBAR rerun Epsilon = "$eps_it" sigma = "$sig_it"
sleep 2s

####

# copy and set force field files

cd /home/ram9/"$Compound"/Gromacs/"$Model"/e"$iEpsref"s"$iSigref" || exit #Must cd back 

echo "$eps_it" "$sig_it" >> eps_Sigma_all

cp /home/ram9/"$Compound"/Gromacs/Force_switch/ethane_temp.top ethane_e"$iteration"s"$iSigref".top
sed -i -e s/some_epsilon/"$eps_it"/ ethane_e"$iteration"s"$iSigref".top 
sed -i -e s/some_sigma/"$sig_it"/ ethane_e"$iteration"s"$iSigref".top

cp /home/ram9/Elliott/EthaneRerunITIC_all EthaneRerunITIC_all

sed -i -e s/some_compound_top/"${Compound}"/ EthaneRerunITIC_all
sed -i -e s/some_model_top/"${Model}"/ EthaneRerunITIC_all
sed -i -e s/some_iSigma_top/"${iSigref}"/ EthaneRerunITIC_all
sed -i -e s/some_iEps_top/"${iteration}"/ EthaneRerunITIC_all
sed -i -e s/some_iRefSig_top/"${iSigref}"/ EthaneRerunITIC_all
sed -i -e s/some_iRefEps_top/"${iEpsref}"/ EthaneRerunITIC_all

./EthaneRerunITIC_all

# Perform MBAR and calculate objective function
#python MBAR_iterations.py

cd /home/ram9/Elliott || exit

python objective_from_MBAR.py

#cp eps_it_temp eps_it_"$((iteration+1))"
#rm eps_it_temp

#cp eps_all_it_temp eps_all_it_"$((iteration+1))"
#rm eps_all_it_temp

#cp F1_temp F1_"$((iteration+1))"
#rm F1_temp

#cp F2_temp F2_"$((iteration+1))"
#rm F2_temp

cd /home/ram9/"$Compound"/Gromacs/"$Model"/e"$iEpsref"s"$iSigref" || exit #Must cd back to original location

cp F_it_temp F_it_"$iteration"
rm F_it_temp

F_new=$(<F_it_"$iteration")

echo "$F_new" >> F_all

#if [ $iteration -gt 1 ]

#then

#Call python code
#output_objective

#if [ $F2 -lt $F1 ]

#then

#F2=$(<F_it_"$iteration")

#else

#F1=$(<F_it_"$iteration")

#fi

#elif [ $iteration -eq 0 ]

#then

#F1=$(<F_it_"$iteration")
#cp F_it_"$iteration" F1_current

#elif [ $iteration -eq 1 ]

#then

#F2=$(<F_it_"$iteration")
#cp F_it_"$iteration" F2_current

#fi

done #for iteration








#Pseudo-code

#do while loop that checks to see if a certain file is 0 or 1 (python will say if converged), for now we can have a set number of iterations

#will read the new epsilon value from the file python creates and submit EthaneIteration

#after each iteration it will call MBAR_analysis_iteration which is like MBAR_analysis_all but it only analyzes the most recent iteration

#maybe I should just have REFPROP output the data to a file that the optimizer can compare to, that way I don't need to run REFPROP over and over, specifically I won't
#need to keep track of the TSim and rhoSim values

#So I am going to have python create a file called "eps_sigma_current" and "ieps_isigma_current" and then I can just read in the ieps_isigma_current file to know which MBAR's I will use

#Right now the problem I am having is knowing how exactly the golden section approach works. Maybe I could modify it for now so that I know exactly how the optimization should work.

exit 0

#######

